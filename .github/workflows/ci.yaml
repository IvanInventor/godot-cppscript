name: Continuous integration

on: pull_request

env:
  # Only used for the cache key. Increment version to force clean build.
  GODOT_BASE_BRANCH: master

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux (GCC)
            os: ubuntu-20.04
            platform: linux
            artifact-name: godot-cpp-linux-glibc2.27-x86_64-release
            artifact-path: bin/libgodot-cpp.linux.template_release.x86_64.a
            run-tests: true
            cache-name: linux-x86_64


#          - name: 🐧 Linux (GCC, Double Precision)
#            os: ubuntu-20.04
#            platform: linux
#            artifact-name: godot-cpp-linux-glibc2.27-x86_64-double-release
#            artifact-path: bin/libgodot-cpp.linux.template_release.double.x86_64.a
#            flags: precision=double
#            run-tests: false
#            cache-name: linux-x86_64-f64
#
#          - name: 🏁 Windows (x86_64, MSVC)
#            os: windows-2019
#            platform: windows
#            artifact-name: godot-cpp-windows-msvc2019-x86_64-release
#            artifact-path: bin/libgodot-cpp.windows.template_release.x86_64.lib
#            run-tests: false
#            cache-name: windows-x86_64-msvc
#
#          - name: 🏁 Windows (x86_64, MinGW)
#            os: windows-2019
#            platform: windows
#            artifact-name: godot-cpp-linux-mingw-x86_64-release
#            artifact-path: bin/libgodot-cpp.windows.template_release.x86_64.a
#            flags: use_mingw=yes
#            run-tests: false
#            cache-name: windows-x86_64-mingw
#
#          - name: 🍎 macOS (universal)
#            os: macos-11
#            platform: macos
#            artifact-name: godot-cpp-macos-universal-release
#            artifact-path: bin/libgodot-cpp.macos.template_release.universal.a
#            flags: arch=universal
#            run-tests: false
#            cache-name: macos-universal
#
#          - name: 🤖 Android (arm64)
#            os: ubuntu-20.04
#            platform: android
#            artifact-name: godot-cpp-android-arm64-release
#            artifact-path: bin/libgodot-cpp.android.template_release.arm64.a
#            flags: arch=arm64
#            run-tests: false
#            cache-name: android-arm64
#
#          - name: 🍏 iOS (arm64)
#            os: macos-11
#            platform: ios
#            artifact-name: godot-cpp-ios-arm64-release
#            artifact-path: bin/libgodot-cpp.ios.template_release.arm64.a
#            flags: arch=arm64
#            run-tests: false
#            cache-name: ios-arm64
#
#          - name: 🌐 Web (wasm32)
#            os: ubuntu-20.04
#            platform: web
#            artifact-name: godot-cpp-web-wasm32-release
#            artifact-path: bin/libgodot-cpp.web.template_release.wasm32.a
#            run-tests: false
#            cache-name: web-wasm32

    env:
      SCONS_CACHE: ${{ github.workspace }}/.scons-cache/
      EM_VERSION: 3.1.39
      EM_CACHE_FOLDER: "emsdk-cache"

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v4
        with:
          ref: test
          submodules: recursive
      
      - name: Fetch revision to test
        run: git fetch origin ${{ github.sha }}

      - name: Checkout needed revision
        run: |
          cd external/godot-cpp && \
          git fetch ../../ ${{ github.sha }}
          git checkout ${{ github.sha }} && \
          cd -

      - name: "[TEST] Check head"
        run : |
          git submodule status

      - name: Setup Godot build cache
        if: false
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Set up Python (for SCons)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install cppscript dependencies
        run: |
          pip install libclang

      - name: Android dependencies
        if: false #${{ matrix.platform == 'android' }}
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c
          link-to-sdk: true

      - name: Web dependencies
        if: false #${{ matrix.platform == 'web' }}
        uses: mymindstorm/setup-emsdk@v13
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      - name: Setup MinGW for Windows/MinGW build
        if: ${{ matrix.platform == 'windows' && matrix.flags == 'use_mingw=yes' }}
        uses: egor-tensin/setup-mingw@v2
        with:
          version: 12.2.0

      - name: Install CMake and dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qqq build-essential pkg-config cmake ninja-build

      - name: Setup CMake
        run: |
          cmake -G "Ninja Multi-Config" -B build

      - name: Build
        run: |
          cmake --build build

#      - name: Install scons
#        run: |
#          python -m pip install scons==4.0.0
#
#      - name: Generate godot-cpp sources only
#        run: |
#          scons platform=${{ matrix.platform }} build_library=no ${{ matrix.flags }}
#          scons -c
#
#      - name: Build godot-cpp (debug)
#        run: |
#          scons platform=${{ matrix.platform }} target=template_debug ${{ matrix.flags }}
#
#      - name: Build test without rebuilding godot-cpp (debug)
#        run: |
#          cd test
#          scons platform=${{ matrix.platform }} target=template_debug ${{ matrix.flags }} build_library=no
#
#      - name: Build test and godot-cpp (release)
#        run: |
#          cd test
#          scons platform=${{ matrix.platform }} target=template_release ${{ matrix.flags }}
#
#      - name: Download latest Godot artifacts
#        uses: dsnopek/action-download-artifact@1322f74e2dac9feed2ee76a32d9ae1ca3b4cf4e9
#        if: ${{ matrix.run-tests }}
#        with:
#          repo: godotengine/godot
#          branch: master
#          event: push
#          workflow: linux_builds.yml
#          workflow_conclusion: success
#          name: linux-editor-mono
#          search_artifacts: true
#          check_artifacts: true
#          ensure_latest: true
#          path: godot-artifacts
#
#      - name: Run tests
#        if: ${{ matrix.run-tests }}
#        run: |
#          chmod +x ./godot-artifacts/godot.linuxbsd.editor.x86_64.mono
#          ./godot-artifacts/godot.linuxbsd.editor.x86_64.mono --headless --version
#          cd test
#          # Need to run the editor so .godot is generated... but it crashes! Ignore that :-)
#          (cd project && (timeout 10 ../../godot-artifacts/godot.linuxbsd.editor.x86_64.mono --editor --headless --quit >/dev/null 2>&1 || true))
#          GODOT=../godot-artifacts/godot.linuxbsd.editor.x86_64.mono ./run-tests.sh
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ matrix.artifact-name }}
#          path: ${{ matrix.artifact-path }}
#          if-no-files-found: error
